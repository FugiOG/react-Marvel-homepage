{"version":3,"sources":["resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","resources/img/vision.png","components/pages/MainPage.js","components/errorMessage/error.gif","components/errorMessage/errorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js","components/errorBoundary/ErrorBoundary.js"],"names":["View","data","name","description","thumbnail","homepage","wiki","imgStyle","objectFit","className","src","alt","style","href","RandomChar","useState","char","setChar","useMarvelService","getCharacters","clearError","process","setProcess","useEffect","updateChar","onCharLoaded","id","Math","floor","random","then","setContent","onClick","disabled","mjolnir","CharList","props","characters","setCharacters","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","limit","getAllCharacters","onRequest","initial","onCharListLoaded","newCharacters","ended","length","item","itemRefs","useRef","focusOnItem","current","forEach","classList","remove","add","focus","elements","useMemo","Component","Error","arr","map","index","CSSTransition","timeout","classNames","ref","el","onCharSelected","onKeyPress","e","key","tabIndex","TransitionGroup","component","renderItems","display","comics","comicsId","i","to","CharInfo","charId","CharSearchForm","getCharacterByName","errorMessage","results","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","MainPage","selectedChar","Helmet","content","ErrorBoundary","decoration","ErrorMessage","img","width","height","margin","request","useCallback","url","a","method","body","headers","fetch","response","ok","status","json","useHttp","_apiBase","_apiKey","getAllComics","res","_transformComics","getComic","_transformCharacter","slice","fullDescription","path","extension","urls","items","resourceURI","title","price","prices","pageCount","language","textObjects","Skeleton","state","error","errorInfo","console","log","this","setState","children"],"mappings":"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","file":"static/js/6.eefed980.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nconst RandomChar = () => {\n    const [char, setChar] = useState({});\n    const {getCharacters, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        // eslint-disable-next-line\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacters(id)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n\n    return (\n        <div className=\"randomchar\">\n            {setContent(process, View, char)}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button \n                    onClick={updateChar} \n                    className=\"button button__main\"\n                    disabled={process === 'loading'}>\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki} = data;\n    let imgStyle = null;\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg'){\n        imgStyle = {objectFit: \"contain\"};\n    }\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n} \n\nexport default RandomChar;","import { useState, useEffect, useRef, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nimport './charList.scss';\nimport useMarvelService from '../../services/MarvelService';\nimport ErrorMessage from '../errorMessage/errorMessage';\nimport Spinner from '../spinner/spinner';\n\nconst setContent = (process, Component, newItemLoading) => {\n    switch (process){\n        case 'waiting':\n            return <Spinner/>;\n        case 'loading':\n            return newItemLoading ? <Component/> : <Spinner/>;\n        case 'confirmed':\n            return <Component/>;\n        case 'error':\n            return <ErrorMessage/>;\n        default: \n            throw new Error('Unexpected process state');\n    }\n}\n\nconst CharList = (props) => {\n\n    const [characters, setCharacters] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n    const [limit, setLimit] = useState(9);\n\n    const {getAllCharacters, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, limit, true);\n        // eslint-disable-next-line\n    }, [])\n\n    const onRequest = (offset, limit, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset, limit)\n            .then(onCharListLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n\n    const onCharListLoaded = (newCharacters) => {\n        let ended = false;\n\n        if (newCharacters.length < 9){\n            ended = true;\n        }\n\n        setCharacters(characters => [...characters, ...newCharacters]);\n        setNewItemLoading(item => false);\n        setOffset(offset => offset + limit);\n        setCharEnded(charEnded => ended);\n    }\n\n    const itemRefs = useRef([]);\n\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    function renderItems (arr) {\n        const elements = arr.map((item, index)=> {\n            const {name, thumbnail, id} = item;\n            const duration = 500;\n\n            let imgStyle = null;\n            if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg'){\n                imgStyle = {objectFit: \"contain\"};\n            }\n\n            return (\n                <CSSTransition \n                key={id}\n                timeout={duration} \n                classNames=\"char__item\">\n                    <li ref={el => itemRefs.current[index] = el} \n                        className=\"char__item\"  \n                        onClick={() => {\n                            props.onCharSelected(id)\n                            focusOnItem(index)\n                        }}\n                        onKeyPress={(e) => {\n                            if (e.key === ' ' || e.key === 'Enter'){\n                                props.onCharSelected(id)\n                                focusOnItem(index)\n                            }\n\n                        }}\n                        tabIndex={0}>\n                            <img src={thumbnail} alt={name} style={imgStyle}/>\n                            <div className=\"char__name\">{name}</div>\n                    </li>\n                </CSSTransition>\n                \n            )\n        })\n\n        return( \n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {elements}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n\n    const elements = useMemo(() => {\n        return setContent(process, () => renderItems(characters), newItemLoading)\n        // eslint-disable-next-line\n    }, [process])\n\n    return (\n        <div className=\"char__list\">\n            {elements}\n            <button \n                className=\"button button__main button__long\"\n                onClick={() => onRequest(offset, limit)}\n                disabled={newItemLoading}\n                style={{display: charEnded ? \"none\" : \"block\"}}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport './charInfo.scss';\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const {getCharacters, clearError, process, setProcess} =  useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        // eslint-disable-next-line\n    }, [props.charId])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () =>{\n        const {charId} = props;\n        if(!charId){\n            return;\n        }\n\n        clearError();\n\n        getCharacters(charId)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n\n\n    return (\n        <div className=\"char__info\">\n            {setContent(process, View, char)}\n        </div>\n    )\n}\n\nconst View = ({data}) => {\n\n    const {name, description, thumbnail, homepage, wiki, comics, comicsId} = data;\n\n    let imgStyle = null;\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg'){\n        imgStyle = {objectFit: \"contain\"};\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : \"Comics is missing\"}\n                {\n                    comics.map((item, i) => {\n                        if (i > 9) {\n                            return;\n                        }\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                <Link to={`/comics/${comicsId[i]}`}>{item.name}</Link>\n                            </li>\n                        )\n                    })\n                }\n                \n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nimport { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/errorMessage';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = (props) => {\r\n    const [char, setChar] = useState(null)\r\n\r\n    const { getCharacterByName, clearError, process, setProcess } =  useMarvelService();\r\n\r\n    const updateChar = (name) =>{\r\n        clearError();\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'));\r\n    }\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const errorMessage = process === 'error' ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ? \r\n                            <div className='char__search-wrapper'>\r\n                                <div className='char__search-success'>There is! Visit {char[0].name} page?</div>\r\n                                <Link to={`/react-Marvel-homepage/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                                    <div className=\"inner\">To page</div>\r\n                                </Link>\r\n                            </div>:\r\n                            <div className='char__search-error'>\r\n                                The character was not found. Check the name and try again\r\n                            </div>\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues={{\r\n                    charName: ''\r\n                }}\r\n                validationSchema={Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit={({charName}) => updateChar(charName)}\r\n            >\r\n                <Form>\r\n                    <label className='char__search-label' htmlFor='charName'>Or find a character by name:</label>\r\n                    <div className='char__search-wrapper'>\r\n                        <Field\r\n                            id='charName'\r\n                            name='charName'\r\n                            type='text'\r\n                            placeholder='Enter name'\r\n                        />\r\n                        <button \r\n                            className='button button__main'\r\n                            type=\"submit\"\r\n                            disabled={process === 'loading'}\r\n                        >\r\n                            <div className='inner'>Find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage className=\"char__search-error\" name='charName' component=\"div\"/>\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"\r\n                    />\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar}/>\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharSearchForm/>\r\n                    </ErrorBoundary>\r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img src={img} style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}} alt=\"\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import {useHttp} from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n    const {request, clearError, process, setProcess} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=c65c6c4f74077c85f47223756e7b0505';\r\n    const _baseOffset = 210;\r\n    const _baseLimit = 9;\r\n    const _comicsLimit = 8;\r\n    const _comicsOffset = 100;\r\n\r\n    const getAllComics = async (offset = _comicsOffset, limit = _comicsLimit) => {\r\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=${limit}&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const getAllCharacters = async (offset = _baseOffset, limit = _baseLimit) => {\r\n        const res = await request(`${_apiBase}characters?limit=${limit}&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacters = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`)\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'description is missing',\r\n            fullDescription: char.description || 'description is missing',\r\n            thumbnail: `${char.thumbnail.path}.${char.thumbnail.extension}`,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            id: char.id,\r\n            comics: char.comics.items,\r\n            comicsId: char.comics.items.map(item => item.resourceURI.slice(-5))\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description,\r\n            price: comics.prices.price ? `${comics.prices.price}$` : 'not available',\r\n            thumbnail: `${comics.thumbnail.path}.${comics.thumbnail.extension}`,\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n            language: comics.textObjects.language || 'en-us'\r\n        }\r\n    }\r\n\r\n    return {getAllCharacters,\r\n            process,\r\n            setProcess,\r\n            getCharacters, \r\n            clearError, \r\n            getAllComics, \r\n            getComic, \r\n            getCharacterByName}\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback  } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [process, setProcess] = useState('waiting');\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-type': 'application/json'}) => {\r\n\r\n        setProcess('loading')\r\n\r\n        try{\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if(!response.ok){\r\n                throw new Error(`Couldn't fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            return data;\r\n        } catch(e) {\r\n            setProcess('error')\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => {\r\n        setProcess('loading')\r\n    }, []);\r\n\r\n    return {request, clearError, process, setProcess}\r\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/spinner';\r\nimport ErrorMessage from '../components/errorMessage/errorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton';\r\n\r\nconst setContent = (process, Component, data) => {\r\n    switch (process){\r\n        case 'waiting':\r\n            return <Skeleton/>;\r\n        case 'loading':\r\n            return <Spinner/>;\r\n        case 'confirmed':\r\n            return <Component data={data}/>;\r\n        case 'error':\r\n            return <ErrorMessage/>;\r\n        default: \r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nexport default setContent;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/errorMessage\";\r\n\r\nclass ErrorBoundary extends Component{\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;"],"sourceRoot":""}