{"version":3,"sources":["resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","resources/img/vision.png","components/pages/MainPage.js","components/errorMessage/error.gif","components/errorMessage/errorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/errorBoundary/ErrorBoundary.js"],"names":["View","char","name","description","thumbnail","homepage","wiki","imgStyle","objectFit","className","src","alt","style","href","RandomChar","useState","setChar","useMarvelService","loading","error","getCharacters","clearError","useEffect","updateChar","onCharLoaded","id","Math","floor","random","then","errorMessage","spinner","content","onClick","disabled","mjolnir","CharList","props","characters","setCharacters","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","limit","getAllCharacters","onRequest","initial","onCharListLoaded","newCharacters","ended","length","item","itemRefs","useRef","elements","arr","map","index","CSSTransition","timeout","classNames","ref","el","current","onCharSelected","forEach","classList","remove","add","focus","focusOnItem","tabIndex","TransitionGroup","component","renderItems","display","Skeleton","comics","comicsId","i","to","CharInfo","charId","skeleton","CharSearchForm","getCharacterByName","results","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","MainPage","selectedChar","Helmet","ErrorBoundary","decoration","ErrorMessage","img","width","height","margin","setLoading","setError","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","message","useHttp","_apiBase","_apiKey","getAllComics","res","_transformComics","getComic","_transformCharacter","slice","fullDescription","path","extension","urls","items","resourceURI","title","price","prices","pageCount","language","textObjects","state","errorInfo","console","log","this","setState","children","Component"],"mappings":"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","file":"static/js/6.45876795.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/spinner';\nimport ErrorMessage from '../errorMessage/errorMessage';\n\nconst RandomChar = () => {\n    const [char, setChar] = useState({});\n    const {loading, error, getCharacters, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacters(id)\n            .then(onCharLoaded);\n    }\n    \n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = error || loading ? null : <View char={char}/> \n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage} \n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button \n                    onClick={updateChar} \n                    className=\"button button__main\"\n                    disabled={loading}>\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki} = char;\n    let imgStyle = null;\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg'){\n        imgStyle = {objectFit: \"contain\"};\n    }\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n} \n\nexport default RandomChar;","import { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nimport './charList.scss';\nimport useMarvelService from '../../services/MarvelService';\nimport ErrorMessage from '../errorMessage/errorMessage';\nimport Spinner from '../spinner/spinner';\n\nconst CharList = (props) => {\n\n    const [characters, setCharacters] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n    const [limit, setLimit] = useState(9);\n\n    const {loading, error, getAllCharacters} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, limit, true);\n    }, [])\n\n    const onRequest = (offset, limit, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset, limit)\n            .then(onCharListLoaded);\n    }\n\n    const onCharListLoaded = (newCharacters) => {\n        let ended = false;\n\n        if (newCharacters.length < 9){\n            ended = true;\n        }\n\n        setCharacters(characters => [...characters, ...newCharacters]);\n        setNewItemLoading(item => false);\n        setOffset(offset => offset + limit);\n        setCharEnded(charEnded => ended);\n    }\n\n    const itemRefs = useRef([]);\n\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    function renderItems (arr) {\n        const elements = arr.map((item, index)=> {\n            const {name, thumbnail, id} = item;\n            const duration = 500;\n\n            let imgStyle = null;\n            if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg'){\n                imgStyle = {objectFit: \"contain\"};\n            }\n\n            return (\n                <CSSTransition \n                key={id}\n                timeout={duration} \n                classNames=\"char__item\">\n                    <li ref={el => itemRefs.current[index] = el} \n                        className=\"char__item\"  \n                        onClick={() => {\n                            props.onCharSelected(id)\n                            focusOnItem(index)\n                        }}\n                        tabIndex={0}>\n                            <img src={thumbnail} alt={name} style={imgStyle}/>\n                            <div className=\"char__name\">{name}</div>\n                    </li>\n                </CSSTransition>\n                \n            )\n        })\n\n        return( \n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {elements}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n\n    const elements = renderItems(characters);\n    \n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n    return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner}\n            {elements}\n            <button \n                className=\"button button__main button__long\"\n                onClick={() => onRequest(offset, limit)}\n                disabled={newItemLoading}\n                style={{display: charEnded ? \"none\" : \"block\"}}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport './charInfo.scss';\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/spinner';\nimport ErrorMessage from '../errorMessage/errorMessage';\nimport Skeleton from '../skeleton/Skeleton';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const {loading, error, getCharacters, clearError} =  useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, [props.charId])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () =>{\n        const {charId} = props;\n        if(!charId){\n            return;\n        }\n\n        clearError();\n\n        getCharacters(charId)\n            .then(onCharLoaded);\n    }\n\n    const skeleton = (loading || error || char) ? null : <Skeleton/>;\n    const spinner = loading ? <Spinner/> : null;\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const content = !(loading || error || !char) ? <View char={char}/> : null;\n\n    return (\n        <div className=\"char__info\">\n            {skeleton}\n            {spinner}\n            {errorMessage}\n            {content}\n        </div>\n    )\n}\n\nconst View = ({char}) => {\n\n    const {name, description, thumbnail, homepage, wiki, comics, comicsId} = char;\n\n    let imgStyle = null;\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg'){\n        imgStyle = {objectFit: \"contain\"};\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : \"Comics is missing\"}\n                {\n                    comics.map((item, i) => {\n                        if (i > 9) {\n                            return;\n                        }\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                <Link to={`/comics/${comicsId[i]}`}>{item.name}</Link>\n                            </li>\n                        )\n                    })\n                }\n                \n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nimport { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/errorMessage';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = (props) => {\r\n    const [char, setChar] = useState(null)\r\n\r\n    const {loading, error, getCharacterByName, clearError} =  useMarvelService();\r\n\r\n    const updateChar = (name) =>{\r\n        clearError();\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded);\r\n    }\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ? \r\n                            <div className='char__search-wrapper'>\r\n                                <div className='char__search-success'>There is! Visit {char[0].name} page?</div>\r\n                                <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                                    <div className=\"inner\">To page</div>\r\n                                </Link>\r\n                            </div>:\r\n                            <div className='char__search-error'>\r\n                                The character was not found. Check the name and try again\r\n                            </div>\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues={{\r\n                    charName: ''\r\n                }}\r\n                validationSchema={Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit={({charName}) => updateChar(charName)}\r\n            >\r\n                <Form>\r\n                    <label className='char__search-label' htmlFor='charName'>Or find a character by name:</label>\r\n                    <div className='char__search-wrapper'>\r\n                        <Field\r\n                            id='charName'\r\n                            name='charName'\r\n                            type='text'\r\n                            placeholder='Enter name'\r\n                        />\r\n                        <button \r\n                            className='button button__main'\r\n                            type=\"submit\"\r\n                            disabled={loading}\r\n                        >\r\n                            <div className='inner'>Find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage className=\"char__search-error\" name='charName' component=\"div\"/>\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"\r\n                    />\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar}/>\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharSearchForm/>\r\n                    </ErrorBoundary>\r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img src={img} style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}} alt=\"\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import {useHttp} from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n    const {loading, request, error, clearError} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=c65c6c4f74077c85f47223756e7b0505';\r\n    const _baseOffset = 210;\r\n    const _baseLimit = 9;\r\n    const _comicsLimit = 8;\r\n    const _comicsOffset = 100;\r\n\r\n    const getAllComics = async (offset = _comicsOffset, limit = _comicsLimit) => {\r\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=${limit}&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const getAllCharacters = async (offset = _baseOffset, limit = _baseLimit) => {\r\n        const res = await request(`${_apiBase}characters?limit=${limit}&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacters = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`)\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'description is missing',\r\n            fullDescription: char.description || 'description is missing',\r\n            thumbnail: `${char.thumbnail.path}.${char.thumbnail.extension}`,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            id: char.id,\r\n            comics: char.comics.items,\r\n            comicsId: char.comics.items.map(item => item.resourceURI.slice(-5))\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description,\r\n            price: comics.prices.price ? `${comics.prices.price}$` : 'not available',\r\n            thumbnail: `${comics.thumbnail.path}.${comics.thumbnail.extension}`,\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n            language: comics.textObjects.language || 'en-us'\r\n        }\r\n    }\r\n\r\n    return {loading, error, getAllCharacters, getCharacters, clearError, getAllComics, getComic, getCharacterByName}\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback  } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-type': 'application/json'}) => {\r\n        \r\n        setLoading(true);\r\n\r\n        try{\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if(!response.ok){\r\n                throw new Error(`Couldn't fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            setLoading(false);\r\n            return data;\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return {loading, request, error, clearError}\r\n}","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/errorMessage\";\r\n\r\nclass ErrorBoundary extends Component{\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;"],"sourceRoot":""}