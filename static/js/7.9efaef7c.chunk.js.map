{"version":3,"sources":["components/comicsList/ComicsList.js","components/pages/ComicsPage.js","components/errorMessage/error.gif","components/errorMessage/errorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/errorBoundary/ErrorBoundary.js","resources/img/Avengers.png","resources/img/Avengers_logo.png","components/appBanner/AppBanner.js"],"names":["ComicsList","useState","comics","setComics","newItemLoading","setNewItemLoading","offset","setOffset","comicsEnded","setComicsEnded","limit","useMarvelService","loading","error","getAllComics","clearError","useEffect","updateComics","onComicsLoaded","newComicsList","ended","length","comicsList","item","initial","then","elements","arr","map","i","id","title","price","thumbnail","tabIndex","className","to","src","alt","renderItems","errorMessage","spinner","disabled","style","onClick","ComicsPage","Helmet","name","content","AppBanner","ErrorBoundary","ErrorMessage","img","display","width","height","objectFit","margin","setLoading","setError","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","message","useHttp","_apiBase","_apiKey","res","results","_transformComics","getComic","getAllCharacters","_transformCharacter","getCharacters","getCharacterByName","char","description","slice","fullDescription","path","extension","homepage","urls","wiki","items","comicsId","resourceURI","prices","pageCount","language","textObjects","state","errorInfo","console","log","this","setState","props","children","Component","avengers","avengersLogo"],"mappings":"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","file":"static/js/7.9efaef7c.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport useMarvelService from '../../services/MarvelService';\nimport './comicsList.scss';\nimport ErrorMessage from '../errorMessage/errorMessage';\nimport Spinner from '../spinner/spinner';\n\nconst ComicsList = () => {\n    const [comics, setComics] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [comicsEnded, setComicsEnded] = useState(false);\n    const [limit, setLimit] = useState(8);\n    const {loading, error, getAllComics, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateComics(offset, limit, true);\n    }, []);\n\n    const onComicsLoaded = (newComicsList) => {\n        let ended = newComicsList.length < 8;\n\n        setComics(comicsList => [...comicsList, ...newComicsList])\n        setNewItemLoading(item => false);\n        setOffset(offset => offset + limit);\n        setComicsEnded(comicsEnded => ended);\n    }\n\n    const updateComics = (offset, limit, initial) => {\n        clearError();\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllComics(offset, limit)\n            .then(onComicsLoaded);\n    }\n\n    function renderItems (arr){\n        const elements = arr.map((item, i) => {\n            const {id, title, price, thumbnail} = item;\n\n            return (\n                <li key={i} tabIndex={0} className=\"comics__item\">\n                    <Link to={`/comics/${id}`}>\n                        <img src={thumbnail} alt={title} className=\"comics__item-img\"/>\n                        <div className=\"comics__item-name\">{title}</div>\n                        <div className=\"comics__item-price\">{price}</div>\n                    </Link>\n                </li>\n            )\n        })\n\n        return (\n            <ul className=\"comics__grid\">\n                {elements}\n            </ul>\n        )\n    }\n\n    const elements = renderItems(comics)\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n    return (\n        <div className=\"comics__list\">\n            {elements}\n            {errorMessage}\n            {spinner}\n               \n            <button \n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{'display': comicsEnded ? 'none' : 'block'}}\n                onClick={() => updateComics(offset, limit)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nexport default ComicsList;","import { Helmet } from 'react-helmet';\r\n\r\nimport AppBanner from '../appBanner/AppBanner';\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport ComicsList from \"../comicsList/ComicsList\";\r\n\r\nconst ComicsPage = () => {\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Page with list of our comics\"\r\n                    />\r\n                <title>Comics page</title>\r\n            </Helmet>\r\n            <AppBanner/>\r\n            <ErrorBoundary>\r\n                <ComicsList />\r\n            </ErrorBoundary>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ComicsPage;","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img src={img} style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}} alt=\"\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import {useHttp} from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n    const {loading, request, error, clearError} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=c65c6c4f74077c85f47223756e7b0505';\r\n    const _baseOffset = 210;\r\n    const _baseLimit = 9;\r\n    const _comicsLimit = 8;\r\n    const _comicsOffset = 100;\r\n\r\n    const getAllComics = async (offset = _comicsOffset, limit = _comicsLimit) => {\r\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=${limit}&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const getAllCharacters = async (offset = _baseOffset, limit = _baseLimit) => {\r\n        const res = await request(`${_apiBase}characters?limit=${limit}&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacters = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`)\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'description is missing',\r\n            fullDescription: char.description || 'description is missing',\r\n            thumbnail: `${char.thumbnail.path}.${char.thumbnail.extension}`,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            id: char.id,\r\n            comics: char.comics.items,\r\n            comicsId: char.comics.items.map(item => item.resourceURI.slice(-5))\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description,\r\n            price: comics.prices.price ? `${comics.prices.price}$` : 'not available',\r\n            thumbnail: `${comics.thumbnail.path}.${comics.thumbnail.extension}`,\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n            language: comics.textObjects.language || 'en-us'\r\n        }\r\n    }\r\n\r\n    return {loading, error, getAllCharacters, getCharacters, clearError, getAllComics, getComic, getCharacterByName}\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback  } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-type': 'application/json'}) => {\r\n        \r\n        setLoading(true);\r\n\r\n        try{\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if(!response.ok){\r\n                throw new Error(`Couldn't fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            setLoading(false);\r\n            return data;\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return {loading, request, error, clearError}\r\n}","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/errorMessage\";\r\n\r\nclass ErrorBoundary extends Component{\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/Avengers.4065c8f9.png\";","export default __webpack_public_path__ + \"static/media/Avengers_logo.9eaf2193.png\";","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;"],"sourceRoot":""}